name: Build Python Wheels

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'  # 当推送tag时触发，如 v1.0.0
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]  # macos-13 for Intel, macos-latest for ARM64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'  # 使用Python 3.9作为构建环境

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.16.2

      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-* cp311-*"  # 支持Python 3.9和3.11（先测试）
          CIBW_SKIP: "*-win32 *-manylinux_i686"  # 跳过32位构建
          CIBW_ARCHS_MACOS: "x86_64 arm64"  # macOS支持Intel和Apple Silicon
          CIBW_ARCHS_LINUX: "x86_64"  # Linux只支持x64（先测试）
          CIBW_ARCHS_WINDOWS: "AMD64"  # Windows只支持x64
          # 在构建前安装系统依赖 - 现在使用setuptools，不需要meson
          CIBW_BEFORE_ALL_LINUX: ""
          CIBW_BEFORE_ALL_MACOS: ""
          CIBW_BEFORE_ALL_WINDOWS: ""
          # 设置环境变量 - 使用setuptools不需要特殊环境变量
          CIBW_ENVIRONMENT: ""
        run: |
          cibuildwheel --output-dir wheelhouse

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build source distribution
        run: |
          python -m build --sdist

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List downloaded files
        run: |
          ls -la dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## WebRTC Audio Processing Python Wheels
            
            This release includes Python wheels for multiple platforms:
            
            ### Installation
            
            #### Method 1: Direct wheel installation
            Download the appropriate wheel for your platform and install:
            ```bash
            pip install webrtc_audio_processing-*.whl
            ```
            
            #### Method 2: Install from GitHub
            ```bash
            pip install git+https://github.com/${{ github.repository }}.git@${{ github.ref_name }}
            ```
            
            ### Supported Platforms
            - Windows x64 (Python 3.8-3.12)
            - macOS x64 & ARM64 (Python 3.8-3.12)
            - Linux x64 & ARM64 (Python 3.8-3.12)
            
            ### Usage
            ```python
            import webrtc_apm
            
            # Create audio processor
            processor = webrtc_apm.AudioProcessor()
            
            # Process audio stream
            processed_audio = processor.process_stream(audio_data, sample_rate=16000)
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test_install:
    name: Test wheel installation
    runs-on: ${{ matrix.os }}
    needs: [build_wheels]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11']
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse

      - name: Install and test wheel
        run: |
          pip install ./wheelhouse/*.whl
          python -c "import webrtc_apm; print('WebRTC Audio Processing imported successfully!')"